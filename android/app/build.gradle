apply plugin: 'com.android.application'

android {
    namespace "com.victaure.app"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.victaure.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // Prevent errors with special characters in paths
            cruncherEnabled = false
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    // Only keep flatDir as fallback for libs that absolutely require it
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
    implementation "androidx.core:core:$androidxCoreVersion"
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
}

// Allow clean to retry on failure
tasks.withType(Delete) {
    retry {
        maxRetries = 5
        maxBackoffPeriod = 10
    }
    doFirst {
        // Force garbage collection before deletion
        System.gc()
        // Small delay to ensure GC completes
        sleep(2000)
    }
}

// Apply Google Services plugin if google-services.json exists
try {
    def servicesJson = file('google-services.json')
    if (servicesJson.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception) {
    logger.warn("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}