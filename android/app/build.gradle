apply plugin: 'com.android.application'

android {
    namespace "com.victaure.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.victaure.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            tasks.whenTaskAdded { task ->
                if (task.name.contains('clean')) {
                    task.doFirst {
                        try {
                            // Delete debug resources
                            delete "${buildDir}/generated/res/resValues/debug"
                            
                            // Also clean Capacitor-specific debug directories
                            def capacitorDebugDir = new File(projectDir, '../node_modules/@capacitor/android/capacitor/build/intermediates/incremental/debug')
                            if (capacitorDebugDir.exists()) {
                                // Force garbage collection before deletion
                                System.gc()
                                Thread.sleep(1000)
                                capacitorDebugDir.deleteDir()
                            }
                            
                            // Clean additional debug directories
                            def debugDirs = [
                                'intermediates/packaged_res/debug',
                                'intermediates/aapt_friendly_merged_manifests/debug',
                                'intermediates/merged_shaders/debug',
                                'intermediates/merged_jni_libs/debug'
                            ]
                            
                            debugDirs.each { dirPath ->
                                def dir = new File(capacitorDebugDir.parentFile, dirPath)
                                if (dir.exists()) {
                                    System.gc()
                                    Thread.sleep(500)
                                    dir.deleteDir()
                                }
                            }
                        } catch (Exception e) {
                            logger.warn("Failed to delete debug resources: ${e.message}")
                            // Force garbage collection to release file handles
                            System.gc()
                            try {
                                Thread.sleep(1000)
                                delete "${buildDir}/generated/res/resValues/debug"
                            } catch (Exception e2) {
                                logger.warn("Second attempt to delete debug resources failed: ${e2.message}")
                            }
                        }
                    }
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception) {
    logger.warn("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}