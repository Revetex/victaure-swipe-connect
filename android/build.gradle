buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.3'
        classpath 'com.google.gms:google-services:4.4.0'
    }
}

apply from: "variables.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
    // Add error handling and retry mechanism for directory deletion
    doFirst {
        def maxRetries = 3
        def retryCount = 0
        def success = false
        
        while (!success && retryCount < maxRetries) {
            try {
                // Delete root project build dir
                project.buildDir.deleteDir()
                
                // Also try to clean Capacitor build directories
                def capacitorBuildDir = new File(rootProject.projectDir, '../node_modules/@capacitor/android/capacitor/build')
                if (capacitorBuildDir.exists()) {
                    // Force garbage collection and wait before deletion
                    System.gc()
                    Thread.sleep(2000)
                    capacitorBuildDir.deleteDir()
                }
                
                // Clean specific Capacitor directories with extra care
                def capacitorDirs = [
                    'intermediates/packaged_res/debug/packageDebugResources',
                    'intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt',
                    'intermediates/merged_shaders/debug/mergeDebugShaders/out',
                    'intermediates/merged_jni_libs/debug/mergeDebugJniLibFolders/out'
                ]
                
                capacitorDirs.each { dirPath ->
                    def dir = new File(capacitorBuildDir, dirPath)
                    if (dir.exists()) {
                        // Force garbage collection and wait before each deletion
                        System.gc()
                        Thread.sleep(1000)
                        if (!dir.deleteDir()) {
                            // If deletion fails, try to delete files individually
                            dir.listFiles()?.each { file ->
                                file.delete()
                            }
                            dir.delete()
                        }
                    }
                }
                
                success = true
            } catch (Exception e) {
                retryCount++
                if (retryCount == maxRetries) {
                    logger.warn("Failed to delete directory after $maxRetries attempts: ${e.message}")
                } else {
                    Thread.sleep(2000) // Wait 2 seconds before retry
                }
            }
        }
    }
}

// Ensure Java 17 compatibility
allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}