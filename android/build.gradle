buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.3'
        classpath 'com.google.gms:google-services:4.4.0'
    }
}

apply from: "variables.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
    
    doFirst {
        def maxRetries = 5
        def retryCount = 0
        def success = false
        
        while (!success && retryCount < maxRetries) {
            try {
                // Force garbage collection before cleanup
                System.gc()
                Thread.sleep(2000)
                
                // Delete root project build dir
                project.buildDir.deleteDir()
                
                // Clean Capacitor build directories with extra care
                def capacitorBuildDir = new File(rootProject.projectDir, '../node_modules/@capacitor/android/capacitor/build')
                if (capacitorBuildDir.exists()) {
                    def capacitorDirs = [
                        'intermediates/packaged_res/debug/packageDebugResources',
                        'intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt',
                        'intermediates/merged_shaders/debug/mergeDebugShaders/out',
                        'intermediates/merged_jni_libs/debug/mergeDebugJniLibFolders/out'
                    ]
                    
                    capacitorDirs.each { dirPath ->
                        def dir = new File(capacitorBuildDir, dirPath)
                        if (dir.exists()) {
                            // Try to delete directory and its contents
                            if (!dir.deleteDir()) {
                                // If directory deletion fails, try to delete files individually
                                dir.listFiles()?.each { file ->
                                    for (int i = 0; i < 3; i++) {
                                        if (file.exists() && !file.delete()) {
                                            System.gc()
                                            Thread.sleep(1000)
                                        } else {
                                            break
                                        }
                                    }
                                }
                                // Try to delete empty directory again
                                dir.delete()
                            }
                        }
                    }
                }
                
                success = true
            } catch (Exception e) {
                retryCount++
                if (retryCount == maxRetries) {
                    logger.warn("Failed to delete directory after $maxRetries attempts: ${e.message}")
                    throw e
                } else {
                    System.gc()
                    Thread.sleep(3000) // Longer wait between retries
                }
            }
        }
    }
}

// Ensure Java 17 compatibility
allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}