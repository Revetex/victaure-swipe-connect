import jsPDF from 'jspdf';
import type { UserProfile } from '@/types/profile';
import { supabase } from "@/integrations/supabase/client";

export const generateVCardPDF = async (profile: UserProfile): Promise<string> => {
  try {
    const doc = new jsPDF();
    
    // Set background
    doc.setFillColor(248, 250, 252); // Light gray background
    doc.rect(0, 0, 210, 297, 'F');
    
    // Add header
    doc.setFillColor(31, 41, 55); // Dark header
    doc.rect(0, 0, 210, 60, 'F');
    
    // Add profile information
    doc.setTextColor(255, 255, 255);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(24);
    doc.text(profile.full_name || 'Professional Profile', 20, 30);
    
    doc.setFontSize(16);
    doc.text(profile.role || '', 20, 45);
    
    // Contact Information Section
    doc.setTextColor(31, 41, 55);
    doc.setFontSize(14);
    doc.text('Contact Information', 20, 80);
    
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    let currentY = 95;
    
    const contactInfo = [
      `Email: ${profile.email || ''}`,
      `Phone: ${profile.phone || ''}`,
      `Location: ${[profile.city, profile.state, profile.country].filter(Boolean).join(', ')}`,
      profile.website ? `Website: ${profile.website}` : '',
    ].filter(Boolean);
    
    contactInfo.forEach((info) => {
      doc.text(info, 20, currentY);
      currentY += 15;
    });
    
    // Skills Section
    currentY += 10;
    if (profile.skills && profile.skills.length > 0) {
      doc.setFont("helvetica", "bold");
      doc.text('Skills', 20, currentY);
      currentY += 15;
      
      doc.setFont("helvetica", "normal");
      const skillsText = profile.skills.join(', ');
      const splitSkills = doc.splitTextToSize(skillsText, 170);
      doc.text(splitSkills, 20, currentY);
      currentY += (splitSkills.length * 7) + 15;
    }
    
    // Experience Section
    if (profile.experiences && profile.experiences.length > 0) {
      doc.setFont("helvetica", "bold");
      doc.text('Professional Experience', 20, currentY);
      currentY += 15;
      
      profile.experiences.forEach(exp => {
        doc.setFont("helvetica", "bold");
        doc.text(`${exp.position} at ${exp.company}`, 20, currentY);
        currentY += 10;
        
        doc.setFont("helvetica", "normal");
        const dateText = `${exp.start_date || ''} - ${exp.end_date || 'Present'}`;
        doc.text(dateText, 20, currentY);
        currentY += 10;
        
        if (exp.description) {
          const splitDesc = doc.splitTextToSize(exp.description, 170);
          doc.text(splitDesc, 20, currentY);
          currentY += (splitDesc.length * 7) + 10;
        }
      });
    }
    
    // Education Section
    if (profile.education && profile.education.length > 0) {
      currentY += 10;
      doc.setFont("helvetica", "bold");
      doc.text('Education', 20, currentY);
      currentY += 15;
      
      profile.education.forEach(edu => {
        doc.setFont("helvetica", "bold");
        doc.text(edu.school_name, 20, currentY);
        currentY += 10;
        
        doc.setFont("helvetica", "normal");
        doc.text(`${edu.degree}${edu.field_of_study ? ` in ${edu.field_of_study}` : ''}`, 20, currentY);
        currentY += 10;
        
        if (edu.start_date || edu.end_date) {
          const dateText = `${edu.start_date || ''} - ${edu.end_date || 'Present'}`;
          doc.text(dateText, 20, currentY);
          currentY += 10;
        }
      });
    }
    
    // Add footer
    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.setTextColor(156, 163, 175);
    doc.text('Generated by Victaure', 20, 280);

    // Generate a filename
    const fileName = `${profile.full_name?.replace(/\s+/g, '_')}_vcard.pdf` || 'vcard.pdf';
    
    // Save and download the PDF directly
    doc.save(fileName);
    
    // Also save to Supabase for future reference
    const pdfBlob = doc.output('blob');
    const storageFileName = `${profile.id}_${Date.now()}.pdf`;
    
    const { data, error } = await supabase
      .storage
      .from('vcards')
      .upload(storageFileName, pdfBlob, {
        contentType: 'application/pdf',
        cacheControl: '3600'
      });
      
    if (error) throw error;
    
    const { data: { publicUrl } } = supabase
      .storage
      .from('vcards')
      .getPublicUrl(storageFileName);
    
    return publicUrl;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};